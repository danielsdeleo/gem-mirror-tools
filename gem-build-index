#!/opt/ruby1.9/bin/ruby

require 'rubygems'
require 'rubygems/user_interaction'
require 'rubygems/indexer'

Gem.configuration.verbose = :VERBOSE_MOTHERFUCKER

class LessDumbIndexer < Gem::Indexer

  def initialize
    options = {:build_legacy => false}
    super("/var/spool/gem-mirror/data", options)
    @all_specs = []
  end

  def run
    puts "Settings: "
    instance_variables.each do |ivar|
      puts "* #{ivar} => #{instance_variable_get(ivar)}"
    end

    Gem::Specification.dirs = []
    gem_files = gem_file_list
    chunks = []
    until (next_chunk = gem_files.slice!(0,100)).empty?
     chunks << next_chunk
    end
    puts "#{chunks.size} chunks of 100"

    chunks.each_with_index do |chunk, i|
      puts "processing #{i}/#{chunks.size}"
      index_chunk(chunk)
    end

    Gem::Specification.all = @all_specs
    Gem::Specification._resort!

    make_temp_directories
    build_marshal_gemspecs
    build_modern_indicies
    build_rss

    compress_indicies
    install_indicies
    install_quick_marshal_files_dammit

  end

  def index_chunk(chunk)
    chunk.each do |gemfile|
      if spec = map_gem_to_spec(gemfile)
        @all_specs << spec
      end
    end
  end

  def map_gem_to_spec(gemfile)
    if File.size(gemfile) == 0 then
      alert_warning "Skipping zero-length gem: #{gemfile}"
      return nil
    end

    spec = Gem::Format.from_file_by_path(gemfile).spec
    spec.loaded_from = gemfile

    abbreviate spec
    sanitize spec

    if !spec.name.respond_to?(:to_str)
      raise "fucked up gem: #{gemfile}"
    end

    # seeing bad gems with floats for the version segments.
    # force the segments to get loaded here so we rescue and skip them.
    spec.version.segments
    spec
  rescue SignalException => e
    alert_error "Received signal, exiting"
    raise
  rescue Gem::Package::FormatError => e
    msg = ["Unable to process #{gemfile}",
           "#{e.message} (#{e.class})",
           "\t#{e.backtrace.join "\n\t"}"].join("\n")
    alert_error msg
    File.unlink(gemfile)
    nil
  rescue Exception => e
    msg = ["Unable to process #{gemfile}",
           "#{e.message} (#{e.class})",
           "\t#{e.backtrace.join "\n\t"}"].join("\n")
    alert_error msg
    nil
  end
 
  # bug in FileUtils? it claims to be moving the temporary quick_marshal_dir to
  # the destination directory, but doesn't copy the files, doesn't remove the
  # source, and doesn't raise.
  def install_quick_marshal_files_dammit
    if File.directory?(@quick_marshal_dir)
      destination = File.join(@dest_directory, @quick_marshal_dir_base)
      system("mv -f #{@quick_marshal_dir} #{destination}")
    end
  end


end


LessDumbIndexer.new.run
